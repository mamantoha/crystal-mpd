{"repository_name":"crystal_mpd","body":"# MPD::Client\n\n![Crystal CI](https://github.com/mamantoha/crystal_mpd/workflows/Crystal%20CI/badge.svg)\n[![GitHub release](https://img.shields.io/github/release/mamantoha/crystal_mpd.svg)](https://github.com/mamantoha/crystal_mpd/releases)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://mamantoha.github.io/crystal_mpd/)\n[![License](https://img.shields.io/github/license/mamantoha/crystal_mpd.svg)](https://github.com/mamantoha/crystal_mpd/blob/master/LICENSE)\n\nConcurrent [Music Player Daemon](https://www.musicpd.org/) client written entirely in Crystal\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  crystal_mpd:\n    github: mamantoha/crystal_mpd\n```\n\n## Usage\n\n```crystal\nrequire \"crystal_mpd\"\n```\n\nAll functionality is contained in the `MPD::Client` class.\nCreating an instance of this class is as simple as:\n\n```crystal\nclient = MPD::Client.new(\"localhost\", 6600)\n```\n\nYou can also omit the `host` and `port`, and it will use the defaults:\n\n```crystal\nclient = MPD::Client.new(\"localhost\")\nclient = MPD::Client.new\n```\n\nYou can connect to a local socket (UNIX domain socket), specify an absolute path:\n\n```crystal\nclient = MPD::Client.new(\"/run/mpd/socket\")\n```\n\nIf a password specified for access to MPD:\n\n```crystal\nclient = MPD::Client.new(\"localhost\", password: \"password\")\n```\n\nThe client library can be used as follows:\n\n```crystal\nputs client.version                    # print the mpd version\nputs client.search(\"title\", \"crystal\") # print the result of the command 'search title crystal'\nclient.close                           # send the close command\nclient.disconect                       # disconnect from the server\n```\n\nCheck `MPD::Client` [source](https://mamantoha.github.io/crystal_mpd/MPD/Client.html) for supported commands.\n\nTo use all `crystal_mpd` functions you should use the latest stable MPD version (0.21.x). `crystal_mpd` already supports function of MPD 0.22.x (e.g. the `readpicture` command).\n\n### Command lists\n\nCommand lists [documentation](https://www.musicpd.org/doc/html/protocol.html#command-lists).\n\nTo facilitate faster adding of files etc. you can pass a list of commands all at once using a command list.\nThe command list begins with `command_list_ok_begin` and ends with `command_list_end`.\n\nIt does not execute any commands until the list has ended.\nThe return value is whatever the return for a list of commands is. On success for all commands, `OK` is returned.\n\nIf a command fails, no more commands are executed and the appropriate ACK error is returned.\n\nIf `command_list_ok_begin` is used, `list_OK` is returned for each successful command executed in the command list.\n\n```crystal\nclient.command_list_ok_begin # start a command list\nclient.update                # insert the update command into the list\nclient.status                # insert the status command into the list\nclient.command_list_end      # result will be a Array with the results\n```\n\nor\n\n```crystal\nclient.with_command_list do\n  client.update\n  client.status\nend\n```\n\n### Ranges\n\nRanges [documentation](https://www.musicpd.org/doc/html/protocol.html#ranges).\n\nSome commands(e.g. `move`, `delete`, `load`, `shuffle`, `playlistinfo`) allow integer ranges(`START:END`) instead of numbers, specifying a range of songs.\nThis is done by using `MPD::Range`. `crystal_mpd` correctly handles inclusive and exclusive ranges (`1..10` vs `1...10`). Negative range end means that we want the range to span until the end of the list.\n\n```crystal\n# move songs 1, 2 and 3 to position 10 (and 11 and 12)\nclient.move(1..3, 10)\n\n# deleve songs 1, 2 and 3 from playlist\nclient.delete(0..2)\n\n# deleve songs 1 and 2\nclient.delete(0...2)\n```\n\nWith negative range end MPD will assumes the biggest possible number then:\n\n```crystal\n# delete all songs from the current playlist, except for the firts ten\nclient.delete(10..-1)\n```\n\nEnd-less range end MPD will also assumes the biggest possible number then:\n\n```crystal\n# delete all songs from the current playlist, except for the firts ten\nclient.delete(10..)\n# or\nclient.delete(10...)\n```\n\nWith begin-less range begin is equal to `0`:\n\n```crystal\n# delete first 1, 2 and 3 songs from the current playlist\nclient.delete(..2)\n\n# delete first 1 and 2 songs from the current playlist\nclient.delete(...2)\n```\n\n### Filters\n\nFilters [documentation](https://www.musicpd.org/doc/html/protocol.html#filters).\n\nAll commands which search for songs (`find`, `search`, `searchadd`, `searchaddpl`, `findadd`, `list`, and `count`) share a common filter syntax.\n\nThe `find` commands are case sensitive, which `search` and related commands ignore case.\n\n```crystal\nclient.search(\"(any =~ 'crystal')\")\nclient.findaddpl(\"alt_rock\", \"(genre == 'Alternative Rock')\")\nclient.list(\"filename\", \"((artist == 'Linkin Park') AND (date == '2003'))\")\n```\n\n### Callbacks\n\nCallbacks are a simple way to make your client respond to events, rather that have to continuously ask the server for updates. This is done by having a background thread continuously check the server for changes.\n\nTo make use of callbacks, you need to:\n\n1. Create a MPD client instance with callbacks enabled.\n\n   ```crystal\n   client = MPD::Client.new(with_callbacks: true)\n   ```\n\n2. Setup a callback to be called when something happens.\n\n   ```crystal\n   client.on :state do |state|\n     puts \"[#{Time.local}] State was change to #{state}\"\n   end\n   ```\n\n`crystal_mpd` supports callbacks for any of the keys returned by `MPD::Client#status`.\n\nHere's the full list of events:\n\n- `:volume`\n- `:repeat`\n- `:random`\n- `:single`\n- `:consume`\n- `:playlist`\n- `:playlistlength`\n- `:mixrampdb`\n- `:state`\n- `:song`\n- `:songid`\n- `:time`\n- `:elapsed`\n- `:bitrate`\n- `:duration`\n- `:audio`\n- `:nextsong`\n- `:nextsongid`\n\n```crystal\nclient = MPD::Client.new(with_callbacks: true)\nclient.callbacks_timeout = 2.seconds\n\nclient.on :state do |state|\n  puts \"[#{Time.local}] State was change to #{state}\"\nend\n\nclient.on :song do\n  if current_song = client.currentsong\n    puts \"[#{Time.local}] 🎵 #{current_song[\"Artist\"]} - #{current_song[\"Title\"]}\"\n  end\nend\n\nloop do\n  sleep 1\nend\n```\n\nThe above will connect to the server like normal, but this time it will create a new thread\nthat loops until you issue an exit. This loop checks the server, then sleeps for 2 seconds, then loops.\n\n### Binary responses\n\nSome commands can return binary data.\n\n```crystal\nclient = MPD::Client.new\n\nif current_song = client.currentsong\n  if response = client.albumart(current_song[\"file\"])\n    File.open(\"cover.png\", \"w\") { |file| file.write(response.to_slice) }\n  end\nend\n```\n\nThe above will locate album art for the current song and save image to `cover.png` file.\n\n### Logging\n\n```crystal\nrequire \"crystal_mpd\"\n\nclient = MPD::Client.new\n\nMPD::Log.level = :debug\nMPD::Log.backend = ::Log::IOBackend.new\n```\n\n## Development\n\nInstall dependencies:\n\n```console\nshards\n```\n\nTo run test:\n\n```console\ncrystal spec\n```\n\n## Who's using `MPD::Client`\n\nIf you're using `MPD::Client` and would like to have your application added to this list, just submit a PR!\n\n- [cryMPD](https://github.com/mamantoha/cryMPD) - control MPD audio playing in the browser\n\n## Contributing\n\n1. Fork it (<https://github.com/mamantoha/crystal_mpd/fork>)\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [mamantoha](<https://github.com/mamantoha>) Anton Maminov - creator, maintainer\n\n## License\n\nCopyright: 2018-2021 Anton Maminov (<anton.maminov@gmail.com>)\n\nThis library is distributed under the MIT license. Please see the LICENSE file.\n","program":{"html_id":"crystal_mpd/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"crystal_mpd","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"crystal_mpd/MPD","path":"MPD.html","kind":"module","full_name":"MPD","name":"MPD","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/crystal_mpd.cr","line_number":8,"url":null},{"filename":"src/crystal_mpd/client.cr","line_number":1,"url":null},{"filename":"src/crystal_mpd/command_list.cr","line_number":1,"url":null},{"filename":"src/crystal_mpd/error.cr","line_number":1,"url":null},{"filename":"src/crystal_mpd/version.cr","line_number":1,"url":null}],"repository_name":"crystal_mpd","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Log","name":"Log","value":"::Log.for(\"mpd\")","doc":null,"summary":null},{"id":"VERSION","name":"VERSION","value":"{{ (`shards version /__w/crystal_mpd/crystal_mpd/src/crystal_mpd`).chomp.stringify }}","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"crystal_mpd/MPD/Client","path":"MPD/Client.html","kind":"class","full_name":"MPD::Client","name":"Client","abstract":false,"superclass":{"html_id":"crystal_mpd/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"crystal_mpd/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crystal_mpd/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/crystal_mpd/client.cr","line_number":21,"url":null}],"repository_name":"crystal_mpd","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"ERROR_PREFIX","name":"ERROR_PREFIX","value":"\"ACK \"","doc":null,"summary":null},{"id":"EVENTS_LIST","name":"EVENTS_LIST","value":"[:volume, :repeat, :random, :single, :consume, :playlist, :playlistlength, :mixrampdb, :state, :song, :songid, :time, :elapsed, :bitrate, :duration, :audio, :nextsong, :nextsongid]","doc":null,"summary":null},{"id":"HELLO_PREFIX","name":"HELLO_PREFIX","value":"\"OK MPD \"","doc":null,"summary":null},{"id":"NEXT","name":"NEXT","value":"\"list_OK\\n\"","doc":null,"summary":null},{"id":"SUCCESS","name":"SUCCESS","value":"\"OK\\n\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal_mpd/MPD","kind":"module","full_name":"MPD","name":"MPD"},"doc":"An MPD Client.\n\n### One-shot usage\n\n```\nrequire \"crystal_mpd\"\n\nmpd = MPD::Client.new(\"localhost\", 6600)\nputs mpd.version\nputs mpd.status\nputs mpd.stats\nmpd.disconnect\n```","summary":"<p>An MPD Client.</p>","class_methods":[],"constructors":[{"id":"new(host:String=&quot;localhost&quot;,port:Int32=6600,*,with_callbacks=false,password:String?=nil)-class-method","html_id":"new(host:String=&quot;localhost&quot;,port:Int32=6600,*,with_callbacks=false,password:String?=nil)-class-method","name":"new","doc":"Creates a new MPD client. Parses the `host`, `port`.\n\nThis constructor will raise an exception if could not connect to MPD","summary":"<p>Creates a new MPD client.</p>","abstract":false,"args":[{"name":"host","doc":null,"default_value":"\"localhost\"","external_name":"host","restriction":"String"},{"name":"port","doc":null,"default_value":"6600","external_name":"port","restriction":"Int32"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"with_callbacks","doc":null,"default_value":"false","external_name":"with_callbacks","restriction":""},{"name":"password","doc":null,"default_value":"nil","external_name":"password","restriction":"String | ::Nil"}],"args_string":"(host : String = <span class=\"s\">&quot;localhost&quot;</span>, port : Int32 = <span class=\"n\">6600</span>, *, with_callbacks = <span class=\"n\">false</span>, password : String? = <span class=\"n\">nil</span>)","args_html":"(host : String = <span class=\"s\">&quot;localhost&quot;</span>, port : Int32 = <span class=\"n\">6600</span>, *, with_callbacks = <span class=\"n\">false</span>, password : String? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":40,"url":null},"def":{"name":"new","args":[{"name":"host","doc":null,"default_value":"\"localhost\"","external_name":"host","restriction":"String"},{"name":"port","doc":null,"default_value":"6600","external_name":"port","restriction":"Int32"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"with_callbacks","doc":null,"default_value":"false","external_name":"with_callbacks","restriction":""},{"name":"password","doc":null,"default_value":"nil","external_name":"password","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(host, port, with_callbacks: with_callbacks, password: password)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"add(uri:String)-instance-method","html_id":"add(uri:String)-instance-method","name":"add","doc":"Adds the file `uri` to the playlist (directories add recursively).\n\n`uri` can also be a single file.","summary":"<p>Adds the file <code>uri</code> to the playlist (directories add recursively).</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"String"}],"args_string":"(uri : String)","args_html":"(uri : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":835,"url":null},"def":{"name":"add","args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"add\", uri)\n  execute(\"fetch_nothing\")\nend"}},{"id":"albumart(uri:String):IO-instance-method","html_id":"albumart(uri:String):IO-instance-method","name":"albumart","doc":"Locate album art for the given song","summary":"<p>Locate album art for the given song</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"String"}],"args_string":"(uri : String) : IO","args_html":"(uri : String) : IO","location":{"filename":"src/crystal_mpd/client.cr","line_number":725,"url":null},"def":{"name":"albumart","args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"IO","visibility":"Public","body":"fetch_binary(IO::Memory.new, 0, \"albumart\", uri)"}},{"id":"callbacks_timeout:Time::Span|Int32-instance-method","html_id":"callbacks_timeout:Time::Span|Int32-instance-method","name":"callbacks_timeout","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Time::Span | Int32","args_html":" : Time::Span | Int32","location":{"filename":"src/crystal_mpd/client.cr","line_number":35,"url":null},"def":{"name":"callbacks_timeout","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time::Span | Int32","visibility":"Public","body":"@callbacks_timeout"}},{"id":"callbacks_timeout=(callbacks_timeout:Time::Span|Int32)-instance-method","html_id":"callbacks_timeout=(callbacks_timeout:Time::Span|Int32)-instance-method","name":"callbacks_timeout=","doc":null,"summary":null,"abstract":false,"args":[{"name":"callbacks_timeout","doc":null,"default_value":"","external_name":"callbacks_timeout","restriction":"Time::Span | Int32"}],"args_string":"(callbacks_timeout : Time::Span | Int32)","args_html":"(callbacks_timeout : Time::Span | Int32)","location":{"filename":"src/crystal_mpd/client.cr","line_number":35,"url":null},"def":{"name":"callbacks_timeout=","args":[{"name":"callbacks_timeout","doc":null,"default_value":"","external_name":"callbacks_timeout","restriction":"Time::Span | Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@callbacks_timeout = callbacks_timeout"}},{"id":"channels-instance-method","html_id":"channels-instance-method","name":"channels","doc":"Obtain a list of all channels. The response is a list of `channel:` lines.","summary":"<p>Obtain a list of all channels.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":317,"url":null},"def":{"name":"channels","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"channels\")\n  execute(\"fetch_list\")\nend"}},{"id":"clear-instance-method","html_id":"clear-instance-method","name":"clear","doc":"Clears the current playlist.","summary":"<p>Clears the current playlist.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":825,"url":null},"def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"clear\")\n  execute(\"fetch_nothing\")\nend"}},{"id":"close-instance-method","html_id":"close-instance-method","name":"close","doc":"Closes the connection to MPD.","summary":"<p>Closes the connection to MPD.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":225,"url":null},"def":{"name":"close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"close\")\nend"}},{"id":"command_list_end-instance-method","html_id":"command_list_end-instance-method","name":"command_list_end","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":185,"url":null},"def":{"name":"command_list_end","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"write_command(\"command_list_end\")\nprocess_command_list\n@command_list.reset\nread_line\n"}},{"id":"command_list_ok_begin-instance-method","html_id":"command_list_ok_begin-instance-method","name":"command_list_ok_begin","doc":"https://www.musicpd.org/doc/html/protocol.html#command-lists","summary":"<p>https://www.musicpd.org/doc/html/protocol.html#command-lists</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":179,"url":null},"def":{"name":"command_list_ok_begin","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"write_command(\"command_list_ok_begin\")\n@command_list.begin\n"}},{"id":"commands-instance-method","html_id":"commands-instance-method","name":"commands","doc":"Shows which commands the current user has access to.","summary":"<p>Shows which commands the current user has access to.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":293,"url":null},"def":{"name":"commands","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"commands\")\n  execute(\"fetch_list\")\nend"}},{"id":"config-instance-method","html_id":"config-instance-method","name":"config","doc":"Dumps configuration values that may be interesting for the client.\n\nThis command is only permitted to `local` clients (connected via UNIX domain socket).\n\nThe following response attributes are available:\n\n* `music_directory`: The absolute path of the music directory.","summary":"<p>Dumps configuration values that may be interesting for the client.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":285,"url":null},"def":{"name":"config","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"config\")\n  execute(\"fetch_object\")\nend"}},{"id":"connect-instance-method","html_id":"connect-instance-method","name":"connect","doc":"Connect to the MPD daemon unless conected.\n\nConnect using the `#reconnect` method.","summary":"<p>Connect to the MPD daemon unless conected.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":57,"url":null},"def":{"name":"connect","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if connected?\nelse\n  reconnect\nend"}},{"id":"connected?-instance-method","html_id":"connected?-instance-method","name":"connected?","doc":"Check if the client is connected.","summary":"<p>Check if the client is connected.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":138,"url":null},"def":{"name":"connected?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@socket.is_a?(Socket)"}},{"id":"consume(state:Bool)-instance-method","html_id":"consume(state:Bool)-instance-method","name":"consume","doc":"Sets consume state to `state`, `state` should be `false` or `true`.\n\nWhen consume is activated, each song played is removed from playlist.","summary":"<p>Sets consume state to <code>state</code>, <code>state</code> should be <code>false</code> or <code>true</code>.</p>","abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Bool"}],"args_string":"(state : Bool)","args_html":"(state : Bool)","location":{"filename":"src/crystal_mpd/client.cr","line_number":795,"url":null},"def":{"name":"consume","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"consume\", boolean(state))\n  execute(\"fetch_nothing\")\nend"}},{"id":"count(filter:String)-instance-method","html_id":"count(filter:String)-instance-method","name":"count","doc":"Count the number of songs and their total playtime in the database matching `filter`","summary":"<p>Count the number of songs and their total playtime in the database matching <code>filter</code></p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":"String"}],"args_string":"(filter : String)","args_html":"(filter : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":750,"url":null},"def":{"name":"count","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"count\", filter)\n  execute(\"fetch_object\")\nend"}},{"id":"count(type:String,query:String)-instance-method","html_id":"count(type:String,query:String)-instance-method","name":"count","doc":"Count the number of songs and their total playtime in the database\nthat `type` is `query`\n\nThe following prints the number of songs whose title matches \"Echoes\"\n\n```\nmpd.count(\"title\", \"Echoes\")\n```","summary":"<p>Count the number of songs and their total playtime in the database that <code>type</code> is <code>query</code></p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String"},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"String"}],"args_string":"(type : String, query : String)","args_html":"(type : String, query : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":742,"url":null},"def":{"name":"count","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String"},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"count\", type, query)\n  execute(\"fetch_object\")\nend"}},{"id":"crop-instance-method","html_id":"crop-instance-method","name":"crop","doc":"Delete all playlist entries except the one currently playing","summary":"<p>Delete all playlist entries except the one currently playing</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":468,"url":null},"def":{"name":"crop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"curren_song = currentsong\nif curren_song\nelse\n  return\nend\nif songs = playlistinfo\n  with_command_list do\n    songs.each do |song|\n      if song[\"file\"] == curren_song[\"file\"]\n        next\n      end\n      deleteid(song[\"Id\"].to_i)\n    end\n  end\nend\n"}},{"id":"currentsong-instance-method","html_id":"currentsong-instance-method","name":"currentsong","doc":"Displays the song info of the current song (same song that is identified in `#status`).","summary":"<p>Displays the song info of the current song (same song that is identified in <code><a href=\"../MPD/Client.html#status-instance-method\">#status</a></code>).</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":360,"url":null},"def":{"name":"currentsong","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"currentsong\")\n  execute(\"fetch_object\")\nend"}},{"id":"decoders-instance-method","html_id":"decoders-instance-method","name":"decoders","doc":"Print a list of decoder plugins, followed by their supported suffixes and MIME types.","summary":"<p>Print a list of decoder plugins, followed by their supported suffixes and MIME types.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":333,"url":null},"def":{"name":"decoders","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"decoders\")\n  execute(\"fetch_plugins\")\nend"}},{"id":"delete(songpos:Int32|MPD::Range)-instance-method","html_id":"delete(songpos:Int32|MPD::Range)-instance-method","name":"delete","doc":"Deletes a song from the playlist.","summary":"<p>Deletes a song from the playlist.</p>","abstract":false,"args":[{"name":"songpos","doc":null,"default_value":"","external_name":"songpos","restriction":"Int32 | MPD::Range"}],"args_string":"(songpos : Int32 | MPD::Range)","args_html":"(songpos : Int32 | <a href=\"../MPD/Range.html\">MPD::Range</a>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":452,"url":null},"def":{"name":"delete","args":[{"name":"songpos","doc":null,"default_value":"","external_name":"songpos","restriction":"Int32 | MPD::Range"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"delete\", songpos)\n  execute(\"fetch_nothing\")\nend"}},{"id":"deleteid(songid:Int32)-instance-method","html_id":"deleteid(songid:Int32)-instance-method","name":"deleteid","doc":"Deletes the song `singid` from the playlist.","summary":"<p>Deletes the song <code>singid</code> from the playlist.</p>","abstract":false,"args":[{"name":"songid","doc":null,"default_value":"","external_name":"songid","restriction":"Int32"}],"args_string":"(songid : Int32)","args_html":"(songid : Int32)","location":{"filename":"src/crystal_mpd/client.cr","line_number":460,"url":null},"def":{"name":"deleteid","args":[{"name":"songid","doc":null,"default_value":"","external_name":"songid","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"deleteid\", songid)\n  execute(\"fetch_nothing\")\nend"}},{"id":"disconnect-instance-method","html_id":"disconnect-instance-method","name":"disconnect","doc":"Disconnect from the MPD daemon.","summary":"<p>Disconnect from the MPD daemon.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":75,"url":null},"def":{"name":"disconnect","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@socket.try do |socket|\n  socket.close\nend\nreset\n"}},{"id":"find(filter:String,*,sort:String?=nil,window:MPD::Range?=nil)-instance-method","html_id":"find(filter:String,*,sort:String?=nil,window:MPD::Range?=nil)-instance-method","name":"find","doc":"Search the database for songs matching `filter`.\n\n`sort` sorts the result by the specified tag. The sort is descending if the tag is prefixed with a minus (‘-‘).\nWithout `sort`, the order is undefined. Only the first tag value will be used, if multiple of the same type exist.\nTo sort by \"Artist\", \"Album\" or \"AlbumArtist\", you should specify \"ArtistSort\", \"AlbumSort\" or \"AlbumArtistSort\"\ninstead. These will automatically fall back to the former if \"*Sort\" doesn’t exist.\n\"AlbumArtist\" falls back to just “Artist”. The type \"Last-Modified\" can sort by file modification time.\n\n`window` can be used to query only a portion of the real response. The parameter is two zero-based record numbers;\na start number and an end number.","summary":"<p>Search the database for songs matching <code>filter</code>.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":"String | ::Nil"},{"name":"window","doc":null,"default_value":"nil","external_name":"window","restriction":"MPD::Range | ::Nil"}],"args_string":"(filter : String, *, sort : String? = <span class=\"n\">nil</span>, window : MPD::Range? = <span class=\"n\">nil</span>)","args_html":"(filter : String, *, sort : String? = <span class=\"n\">nil</span>, window : <a href=\"../MPD/Range.html\">MPD::Range</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":867,"url":null},"def":{"name":"find","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":"String | ::Nil"},{"name":"window","doc":null,"default_value":"nil","external_name":"window","restriction":"MPD::Range | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  hash = {} of String => String\n  sort.try do\n    hash[\"sort\"] = sort\n  end\n  window.try do\n    hash[\"window\"] = parse_range(window)\n  end\n  write_command(\"find\", filter, hash)\n  execute(\"fetch_songs\")\nend"}},{"id":"find(type:String,query:String)-instance-method","html_id":"find(type:String,query:String)-instance-method","name":"find","doc":"Finds songs in the db that are exactly `query`.\n\n`type` can be any tag supported by MPD, or one of the two special parameters:\n\n* `file` to search by full path (relative to database root)\n* `any` to match against all available tags.\n\n`query` is what to find.","summary":"<p>Finds songs in the db that are exactly <code>query</code>.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String"},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"String"}],"args_string":"(type : String, query : String)","args_html":"(type : String, query : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":850,"url":null},"def":{"name":"find","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String"},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"find\", type, query)\n  execute(\"fetch_songs\")\nend"}},{"id":"findadd(filter:String,*,sort:String?=nil,window:MPD::Range?=nil)-instance-method","html_id":"findadd(filter:String,*,sort:String?=nil,window:MPD::Range?=nil)-instance-method","name":"findadd","doc":"Search the database for songs matching `filter` and add them to the queue.\n\nParameters have the same meaning as for `#find`.\n\n```\nmpd.findadd(\"(genre == 'Alternative Rock')\")\n```","summary":"<p>Search the database for songs matching <code>filter</code> and add them to the queue.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":"String | ::Nil"},{"name":"window","doc":null,"default_value":"nil","external_name":"window","restriction":"MPD::Range | ::Nil"}],"args_string":"(filter : String, *, sort : String? = <span class=\"n\">nil</span>, window : MPD::Range? = <span class=\"n\">nil</span>)","args_html":"(filter : String, *, sort : String? = <span class=\"n\">nil</span>, window : <a href=\"../MPD/Range.html\">MPD::Range</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":919,"url":null},"def":{"name":"findadd","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":"String | ::Nil"},{"name":"window","doc":null,"default_value":"nil","external_name":"window","restriction":"MPD::Range | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  hash = {} of String => String\n  sort.try do\n    hash[\"sort\"] = sort\n  end\n  window.try do\n    hash[\"window\"] = parse_range(window)\n  end\n  write_command(\"findadd\", filter, hash)\n  execute(\"fetch_nothing\")\nend"}},{"id":"host:String-instance-method","html_id":"host:String-instance-method","name":"host","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/crystal_mpd/client.cr","line_number":34,"url":null},"def":{"name":"host","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@host"}},{"id":"list(type:String,filter:String?=nil)-instance-method","html_id":"list(type:String,filter:String?=nil)-instance-method","name":"list","doc":"Lists unique tags values of the specified `type`.\n\n`type` can be any tag supported by MPD or file.\n\n```\nmpd.list(\"Artist\")\n```\n\nAdditional arguments may specify a `filter`.\nThe following example lists all file names by their respective artist and date:\n\n```\nmpd.list(\"Artist\")\nmpd.list(\"filename\", \"((artist == 'Linkin Park') AND (date == '2003'))\")\n```","summary":"<p>Lists unique tags values of the specified <code>type</code>.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String"},{"name":"filter","doc":null,"default_value":"nil","external_name":"filter","restriction":"String | Nil"}],"args_string":"(type : String, filter : String? = <span class=\"n\">nil</span>)","args_html":"(type : String, filter : String? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":717,"url":null},"def":{"name":"list","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String"},{"name":"filter","doc":null,"default_value":"nil","external_name":"filter","restriction":"String | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"list\", type, filter)\n  execute(\"fetch_list\")\nend"}},{"id":"listall(uri:String?=nil)-instance-method","html_id":"listall(uri:String?=nil)-instance-method","name":"listall","doc":"Lists all songs and directories in `uri`.","summary":"<p>Lists all songs and directories in <code>uri</code>.</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"nil","external_name":"uri","restriction":"String | ::Nil"}],"args_string":"(uri : String? = <span class=\"n\">nil</span>)","args_html":"(uri : String? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":947,"url":null},"def":{"name":"listall","args":[{"name":"uri","doc":null,"default_value":"nil","external_name":"uri","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"listall\", uri)\n  execute(\"fetch_database\")\nend"}},{"id":"listallinfo(uri:String?=nil)-instance-method","html_id":"listallinfo(uri:String?=nil)-instance-method","name":"listallinfo","doc":"Same as `#listall`, except it also returns metadata info in the same format as `#lsinfo`.","summary":"<p>Same as <code><a href=\"../MPD/Client.html#listall(uri:String?=nil)-instance-method\">#listall</a></code>, except it also returns metadata info in the same format as <code><a href=\"../MPD/Client.html#lsinfo(uri:String?=nil)-instance-method\">#lsinfo</a></code>.</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"nil","external_name":"uri","restriction":"String | ::Nil"}],"args_string":"(uri : String? = <span class=\"n\">nil</span>)","args_html":"(uri : String? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":969,"url":null},"def":{"name":"listallinfo","args":[{"name":"uri","doc":null,"default_value":"nil","external_name":"uri","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"listallinfo\", uri)\n  execute(\"fetch_database\")\nend"}},{"id":"listfiles(uri:String?=nil)-instance-method","html_id":"listfiles(uri:String?=nil)-instance-method","name":"listfiles","doc":"Lists the contents of the directory `URI`, including files are not recognized by `MPD`.\n\n`uri` can be a path relative to the music directory or an `uri` understood by one of the storage plugins.\nThe response contains at least one line for each directory entry with the prefix `file: ` or  `directory: `,\nand may be followed by file attributes such as `Last-Modified` and `size`.\n\nFor example, `smb://SERVER` returns a list of all shares on the given SMB/CIFS server;\n`nfs://servername/path` obtains a directory listing from the NFS server.","summary":"<p>Lists the contents of the directory <code>URI</code>, including files are not recognized by <code><a href=\"../MPD.html\">MPD</a></code>.</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"nil","external_name":"uri","restriction":"String | ::Nil"}],"args_string":"(uri : String? = <span class=\"n\">nil</span>)","args_html":"(uri : String? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":984,"url":null},"def":{"name":"listfiles","args":[{"name":"uri","doc":null,"default_value":"nil","external_name":"uri","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"listfiles\", uri)\n  execute(\"fetch_database\")\nend"}},{"id":"listplaylist(name:String)-instance-method","html_id":"listplaylist(name:String)-instance-method","name":"listplaylist","doc":"Lists the songs in the playlist `name`.\n\nPlaylist plugins are supported.","summary":"<p>Lists the songs in the playlist <code>name</code>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":585,"url":null},"def":{"name":"listplaylist","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"listplaylist\", name)\n  execute(\"fetch_list\")\nend"}},{"id":"listplaylistinfo(name:String)-instance-method","html_id":"listplaylistinfo(name:String)-instance-method","name":"listplaylistinfo","doc":"Lists the songs with metadata in the playlist.\n\nPlaylist plugins are supported.","summary":"<p>Lists the songs with metadata in the playlist.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":595,"url":null},"def":{"name":"listplaylistinfo","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"listplaylistinfo\", name)\n  execute(\"fetch_songs\")\nend"}},{"id":"listplaylists-instance-method","html_id":"listplaylists-instance-method","name":"listplaylists","doc":"Prints a list of the playlist directory.\n\nAfter each playlist name the server sends its last modification time\nas attribute `Last-Modified` in ISO 8601 format.\nTo avoid problems due to clock differences between clients and the server,\nclients should not compare this value with their local clock.","summary":"<p>Prints a list of the playlist directory.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":392,"url":null},"def":{"name":"listplaylists","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"listplaylists\")\n  execute(\"fetch_playlists\")\nend"}},{"id":"load(name:String,songpos:Int32|MPD::Range|Nil=nil)-instance-method","html_id":"load(name:String,songpos:Int32|MPD::Range|Nil=nil)-instance-method","name":"load","doc":"Loads the playlist `name` into the current queue.\n\nPlaylist plugins are supported.\nA range `songpos` may be specified to load only a part of the playlist.","summary":"<p>Loads the playlist <code>name</code> into the current queue.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"songpos","doc":null,"default_value":"nil","external_name":"songpos","restriction":"Int32 | MPD::Range | Nil"}],"args_string":"(name : String, songpos : Int32 | MPD::Range | Nil = <span class=\"n\">nil</span>)","args_html":"(name : String, songpos : Int32 | <a href=\"../MPD/Range.html\">MPD::Range</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":496,"url":null},"def":{"name":"load","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"songpos","doc":null,"default_value":"nil","external_name":"songpos","restriction":"Int32 | MPD::Range | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"load\", name, songpos)\n  execute(\"fetch_nothing\")\nend"}},{"id":"lsinfo(uri:String?=nil)-instance-method","html_id":"lsinfo(uri:String?=nil)-instance-method","name":"lsinfo","doc":"Lists the contents of the directory `uri`.\n\nWhen listing the root directory, this currently returns the list of stored playlists.\nThis behavior is deprecated; use `#listplaylists` instead.\n\nClients that are connected via UNIX domain socket may use this command\nto read the tags of an arbitrary local file (`uri` beginning with `file:///`).","summary":"<p>Lists the contents of the directory <code>uri</code>.</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"nil","external_name":"uri","restriction":"String | ::Nil"}],"args_string":"(uri : String? = <span class=\"n\">nil</span>)","args_html":"(uri : String? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":961,"url":null},"def":{"name":"lsinfo","args":[{"name":"uri","doc":null,"default_value":"nil","external_name":"uri","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"lsinfo\", uri)\n  execute(\"fetch_database\")\nend"}},{"id":"move(from:Int32|MPD::Range,to:Int32)-instance-method","html_id":"move(from:Int32|MPD::Range,to:Int32)-instance-method","name":"move","doc":"Moves the song at `from` or range of songs at `from` to `to` in the playlist.","summary":"<p>Moves the song at <code>from</code> or range of songs at <code>from</code> to <code>to</code> in the playlist.</p>","abstract":false,"args":[{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"Int32 | MPD::Range"},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Int32"}],"args_string":"(from : Int32 | MPD::Range, to : Int32)","args_html":"(from : Int32 | <a href=\"../MPD/Range.html\">MPD::Range</a>, to : Int32)","location":{"filename":"src/crystal_mpd/client.cr","line_number":485,"url":null},"def":{"name":"move","args":[{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"Int32 | MPD::Range"},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"move\", from, to)\n  execute(\"fetch_nothing\")\nend"}},{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Plays next song in the playlist.","summary":"<p>Plays next song in the playlist.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":679,"url":null},"def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"next\")\n  execute(\"fetch_nothing\")\nend"}},{"id":"nextsong:Object?-instance-method","html_id":"nextsong:Object?-instance-method","name":"nextsong","doc":"Show the currently queued (next) song.","summary":"<p>Show the currently queued (next) song.</p>","abstract":false,"args":[],"args_string":" : Object?","args_html":" : <a href=\"../MPD/Object.html\">Object</a>?","location":{"filename":"src/crystal_mpd/client.cr","line_number":368,"url":null},"def":{"name":"nextsong","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Object | ::Nil","visibility":"Public","body":"if _status = status\n  if nextsongid = _status[\"nextsongid\"]?\n    if songs = playlistid(nextsongid.to_i)\n      songs.first\n    end\n  end\nend"}},{"id":"notcommands-instance-method","html_id":"notcommands-instance-method","name":"notcommands","doc":"Shows which commands the current user does not have access to.","summary":"<p>Shows which commands the current user does not have access to.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":301,"url":null},"def":{"name":"notcommands","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"notcommands\")\n  execute(\"fetch_list\")\nend"}},{"id":"on(event:Symbol,&block:String->_)-instance-method","html_id":"on(event:Symbol,&block:String->_)-instance-method","name":"on","doc":"This will register a block callback that will trigger whenever\nthat specific event happens.\n\n```\nmpd.on :state do |state|\n  puts \"State was change to #{state}\"\nend\n```","summary":"<p>This will register a block callback that will trigger whenever that specific event happens.</p>","abstract":false,"args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Symbol"}],"args_string":"(event : Symbol, &block : String -> _)","args_html":"(event : Symbol, &block : String -> _)","location":{"filename":"src/crystal_mpd/client.cr","line_number":91,"url":null},"def":{"name":"on","args":[{"name":"event","doc":null,"default_value":"","external_name":"event","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(String -> _)"},"return_type":"","visibility":"Public","body":"((__temp_28 = event\n@callbacks[__temp_28]? || (@callbacks[__temp_28] = [] of Proc(String, Nil)))).push(block)"}},{"id":"outputs-instance-method","html_id":"outputs-instance-method","name":"outputs","doc":"Shows information about all outputs.","summary":"<p>Shows information about all outputs.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":341,"url":null},"def":{"name":"outputs","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"outputs\")\n  execute(\"fetch_outputs\")\nend"}},{"id":"pause-instance-method","html_id":"pause-instance-method","name":"pause","doc":"Toggles pause/resumes playing.","summary":"<p>Toggles pause/resumes playing.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":637,"url":null},"def":{"name":"pause","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"pause\")\n  execute(\"fetch_nothing\")\nend"}},{"id":"play(songpos:Int32?=nil)-instance-method","html_id":"play(songpos:Int32?=nil)-instance-method","name":"play","doc":"Begins playing the playlist at song number `songpos`.","summary":"<p>Begins playing the playlist at song number <code>songpos</code>.</p>","abstract":false,"args":[{"name":"songpos","doc":null,"default_value":"nil","external_name":"songpos","restriction":"Int32 | ::Nil"}],"args_string":"(songpos : Int32? = <span class=\"n\">nil</span>)","args_html":"(songpos : Int32? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":629,"url":null},"def":{"name":"play","args":[{"name":"songpos","doc":null,"default_value":"nil","external_name":"songpos","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"play\", songpos)\n  execute(\"fetch_nothing\")\nend"}},{"id":"playid(songnid:Int32?=nil)-instance-method","html_id":"playid(songnid:Int32?=nil)-instance-method","name":"playid","doc":"Begins playing the playlist at song `songid`.","summary":"<p>Begins playing the playlist at song <code>songid</code>.</p>","abstract":false,"args":[{"name":"songnid","doc":null,"default_value":"nil","external_name":"songnid","restriction":"Int32 | ::Nil"}],"args_string":"(songnid : Int32? = <span class=\"n\">nil</span>)","args_html":"(songnid : Int32? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":695,"url":null},"def":{"name":"playid","args":[{"name":"songnid","doc":null,"default_value":"nil","external_name":"songnid","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"playid\", songnid)\n  execute(\"fetch_nothing\")\nend"}},{"id":"playlist-instance-method","html_id":"playlist-instance-method","name":"playlist","doc":"Get current playlist","summary":"<p>Get current playlist</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":400,"url":null},"def":{"name":"playlist","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"playlist\")\n  execute(\"fetch_songs\")\nend"}},{"id":"playlistadd(name:String,uri:String)-instance-method","html_id":"playlistadd(name:String,uri:String)-instance-method","name":"playlistadd","doc":"Adds `uri` to the playlist `name`.m3u.\n\n`name`.m3u will be created if it does not exist.","summary":"<p>Adds <code>uri</code> to the playlist <code>name</code>.m3u.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"String"}],"args_string":"(name : String, uri : String)","args_html":"(name : String, uri : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":605,"url":null},"def":{"name":"playlistadd","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"playlistadd\", name, uri)\n  execute(\"fetch_nothing\")\nend"}},{"id":"playlistclear(name:String)-instance-method","html_id":"playlistclear(name:String)-instance-method","name":"playlistclear","doc":"Clears the playlist `name`.m3u.","summary":"<p>Clears the playlist <code>name</code>.m3u.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":520,"url":null},"def":{"name":"playlistclear","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"playlistclear\", name)\n  execute(\"fetch_nothing\")\nend"}},{"id":"playlistdelete(name:String,songpos:Int32)-instance-method","html_id":"playlistdelete(name:String,songpos:Int32)-instance-method","name":"playlistdelete","doc":"Deletes `songpos` from the playlist `name`.m3u.","summary":"<p>Deletes <code>songpos</code> from the playlist <code>name</code>.m3u.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"songpos","doc":null,"default_value":"","external_name":"songpos","restriction":"Int32"}],"args_string":"(name : String, songpos : Int32)","args_html":"(name : String, songpos : Int32)","location":{"filename":"src/crystal_mpd/client.cr","line_number":621,"url":null},"def":{"name":"playlistdelete","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"songpos","doc":null,"default_value":"","external_name":"songpos","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"playlistdelete\", name, songpos)\n  execute(\"fetch_nothing\")\nend"}},{"id":"playlistfind(tag:String,needle:String)-instance-method","html_id":"playlistfind(tag:String,needle:String)-instance-method","name":"playlistfind","doc":"Finds songs in the current playlist with strict matching.","summary":"<p>Finds songs in the current playlist with strict matching.</p>","abstract":false,"args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"},{"name":"needle","doc":null,"default_value":"","external_name":"needle","restriction":"String"}],"args_string":"(tag : String, needle : String)","args_html":"(tag : String, needle : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":444,"url":null},"def":{"name":"playlistfind","args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"},{"name":"needle","doc":null,"default_value":"","external_name":"needle","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"playlistfind\", tag, needle)\n  execute(\"fetch_songs\")\nend"}},{"id":"playlistid(songid:Int32?=nil)-instance-method","html_id":"playlistid(songid:Int32?=nil)-instance-method","name":"playlistid","doc":"Displays a list of songs in the playlist.\n\n`songid` is optional and specifies a single song to display info for.","summary":"<p>Displays a list of songs in the playlist.</p>","abstract":false,"args":[{"name":"songid","doc":null,"default_value":"nil","external_name":"songid","restriction":"Int32 | ::Nil"}],"args_string":"(songid : Int32? = <span class=\"n\">nil</span>)","args_html":"(songid : Int32? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":546,"url":null},"def":{"name":"playlistid","args":[{"name":"songid","doc":null,"default_value":"nil","external_name":"songid","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"playlistid\", songid)\n  execute(\"fetch_songs\")\nend"}},{"id":"playlistinfo(songpos:Int32|MPD::Range|Nil=nil)-instance-method","html_id":"playlistinfo(songpos:Int32|MPD::Range|Nil=nil)-instance-method","name":"playlistinfo","doc":"Displays a list of all songs in the playlist,\n\nor if the optional argument is given, displays information only for\nthe song `songpos` or the range of songs `START:END`.\n\nRange is done in by using `MPD::Range`.\n\nShow info about the first three songs in the playlist:\n\n```\nmpd.playlistinfo\nmpd.playlistinfo(1..3)\nmpd.playlistinfo(..3)\nmpd.playlistinfo(10..)\n```\n\nWith negative range end MPD will assumes the biggest possible number then\n\n```\nmpd.playlistinfo(10..-1)\n```","summary":"<p>Displays a list of all songs in the playlist,</p>","abstract":false,"args":[{"name":"songpos","doc":null,"default_value":"nil","external_name":"songpos","restriction":"Int32 | MPD::Range | Nil"}],"args_string":"(songpos : Int32 | MPD::Range | Nil = <span class=\"n\">nil</span>)","args_html":"(songpos : Int32 | <a href=\"../MPD/Range.html\">MPD::Range</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":428,"url":null},"def":{"name":"playlistinfo","args":[{"name":"songpos","doc":null,"default_value":"nil","external_name":"songpos","restriction":"Int32 | MPD::Range | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"playlistinfo\", songpos)\n  execute(\"fetch_songs\")\nend"}},{"id":"playlistmove(name:String,songid:Int32,songpos:Int32)-instance-method","html_id":"playlistmove(name:String,songid:Int32,songpos:Int32)-instance-method","name":"playlistmove","doc":"Moves `songid` in the playlist `name`.m3u to the position `songpos`","summary":"<p>Moves <code>songid</code> in the playlist <code>name</code>.m3u to the position <code>songpos</code></p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"songid","doc":null,"default_value":"","external_name":"songid","restriction":"Int32"},{"name":"songpos","doc":null,"default_value":"","external_name":"songpos","restriction":"Int32"}],"args_string":"(name : String, songid : Int32, songpos : Int32)","args_html":"(name : String, songid : Int32, songpos : Int32)","location":{"filename":"src/crystal_mpd/client.cr","line_number":613,"url":null},"def":{"name":"playlistmove","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"songid","doc":null,"default_value":"","external_name":"songid","restriction":"Int32"},{"name":"songpos","doc":null,"default_value":"","external_name":"songpos","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"playlistmove\", name, songid, songpos)\n  execute(\"fetch_nothing\")\nend"}},{"id":"playlistsearch(tag:String,needle:String)-instance-method","html_id":"playlistsearch(tag:String,needle:String)-instance-method","name":"playlistsearch","doc":"Searches case-sensitively for partial matches in the current playlist.","summary":"<p>Searches case-sensitively for partial matches in the current playlist.</p>","abstract":false,"args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"},{"name":"needle","doc":null,"default_value":"","external_name":"needle","restriction":"String"}],"args_string":"(tag : String, needle : String)","args_html":"(tag : String, needle : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":436,"url":null},"def":{"name":"playlistsearch","args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"},{"name":"needle","doc":null,"default_value":"","external_name":"needle","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"playlistsearch\", tag, needle)\n  execute(\"fetch_songs\")\nend"}},{"id":"port:Int32-instance-method","html_id":"port:Int32-instance-method","name":"port","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/crystal_mpd/client.cr","line_number":34,"url":null},"def":{"name":"port","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@port"}},{"id":"previous-instance-method","html_id":"previous-instance-method","name":"previous","doc":"Plays previous song in the playlist.","summary":"<p>Plays previous song in the playlist.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":687,"url":null},"def":{"name":"previous","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"previous\")\n  execute(\"fetch_nothing\")\nend"}},{"id":"random(state:Bool)-instance-method","html_id":"random(state:Bool)-instance-method","name":"random","doc":"Sets random state to `state`, `state` should be `false` or `true`.","summary":"<p>Sets random state to <code>state</code>, <code>state</code> should be <code>false</code> or <code>true</code>.</p>","abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Bool"}],"args_string":"(state : Bool)","args_html":"(state : Bool)","location":{"filename":"src/crystal_mpd/client.cr","line_number":758,"url":null},"def":{"name":"random","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"random\", boolean(state))\n  execute(\"fetch_nothing\")\nend"}},{"id":"readmessages-instance-method","html_id":"readmessages-instance-method","name":"readmessages","doc":"Reads messages for this client. The response is a list of `channel:` and `message:` lines.","summary":"<p>Reads messages for this client.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":1019,"url":null},"def":{"name":"readmessages","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"readmessages\")\n  execute(\"fetch_messages\")\nend"}},{"id":"readpicture(uri:String):IO-instance-method","html_id":"readpicture(uri:String):IO-instance-method","name":"readpicture","doc":"Locate a picture for the given song","summary":"<p>Locate a picture for the given song</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"String"}],"args_string":"(uri : String) : IO","args_html":"(uri : String) : IO","location":{"filename":"src/crystal_mpd/client.cr","line_number":730,"url":null},"def":{"name":"readpicture","args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"IO","visibility":"Public","body":"fetch_binary(IO::Memory.new, 0, \"readpicture\", uri)"}},{"id":"reconnect-instance-method","html_id":"reconnect-instance-method","name":"reconnect","doc":"Attempts to reconnect to the MPD daemon.","summary":"<p>Attempts to reconnect to the MPD daemon.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":62,"url":null},"def":{"name":"reconnect","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@socket = if host.starts_with?('/')\n  UNIXSocket.new(host)\nelse\n  TCPSocket.new(host, port)\nend\nhello\npassword\nif @with_callbacks\n  callback_thread\nend\n"}},{"id":"rename(name:String,new_name:String)-instance-method","html_id":"rename(name:String,new_name:String)-instance-method","name":"rename","doc":"Renames the playlist `name`.m3u to `new_name`.m3u.","summary":"<p>Renames the playlist <code>name</code>.m3u to <code>new_name</code>.m3u.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"new_name","doc":null,"default_value":"","external_name":"new_name","restriction":"String"}],"args_string":"(name : String, new_name : String)","args_html":"(name : String, new_name : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":536,"url":null},"def":{"name":"rename","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"new_name","doc":null,"default_value":"","external_name":"new_name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"rename\", name, new_name)\n  execute(\"fetch_nothing\")\nend"}},{"id":"repeat(state:Bool)-instance-method","html_id":"repeat(state:Bool)-instance-method","name":"repeat","doc":"Sets repeat state to `state`, `state` should be `false` or `true`.","summary":"<p>Sets repeat state to <code>state</code>, <code>state</code> should be <code>false</code> or <code>true</code>.</p>","abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Bool"}],"args_string":"(state : Bool)","args_html":"(state : Bool)","location":{"filename":"src/crystal_mpd/client.cr","line_number":766,"url":null},"def":{"name":"repeat","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"repeat\", boolean(state))\n  execute(\"fetch_nothing\")\nend"}},{"id":"replay_gain_mode(mode:String)-instance-method","html_id":"replay_gain_mode(mode:String)-instance-method","name":"replay_gain_mode","doc":"Sets the replay gain mode.\n\nOne of `off`, `track`, `album`, `auto`.\nChanging the mode during playback may take several seconds, because the new settings does not affect the buffered data.\nThis command triggers the options idle event.","summary":"<p>Sets the replay gain mode.</p>","abstract":false,"args":[{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":"String"}],"args_string":"(mode : String)","args_html":"(mode : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":807,"url":null},"def":{"name":"replay_gain_mode","args":[{"name":"mode","doc":null,"default_value":"","external_name":"mode","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"replay_gain_mode\", mode)\n  execute(\"fetch_nothing\")\nend"}},{"id":"replay_gain_status-instance-method","html_id":"replay_gain_status-instance-method","name":"replay_gain_status","doc":"Prints replay gain options.\n\nCurrently, only the variable `replay_gain_mode` is returned.","summary":"<p>Prints replay gain options.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":817,"url":null},"def":{"name":"replay_gain_status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"replay_gain_status\")\n  execute(\"fetch_item\")\nend"}},{"id":"rescan(uri:String?=nil)-instance-method","html_id":"rescan(uri:String?=nil)-instance-method","name":"rescan","doc":"Same as `#update`, but also rescans unmodified files.","summary":"<p>Same as <code><a href=\"../MPD/Client.html#update(uri:String?=nil)-instance-method\">#update</a></code>, but also rescans unmodified files.</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"nil","external_name":"uri","restriction":"String | ::Nil"}],"args_string":"(uri : String? = <span class=\"n\">nil</span>)","args_html":"(uri : String? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":379,"url":null},"def":{"name":"rescan","args":[{"name":"uri","doc":null,"default_value":"nil","external_name":"uri","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"rescan\", uri)\n  execute(\"fetch_item\")\nend"}},{"id":"rm(name:String)-instance-method","html_id":"rm(name:String)-instance-method","name":"rm","doc":"Removes the playlist `name`.m3u from the playlist directory.","summary":"<p>Removes the playlist <code>name</code>.m3u from the playlist directory.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":528,"url":null},"def":{"name":"rm","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"rm\", name)\n  execute(\"fetch_nothing\")\nend"}},{"id":"save(name:String)-instance-method","html_id":"save(name:String)-instance-method","name":"save","doc":"Saves the current playlist to `name`.m3u in the playlist directory.","summary":"<p>Saves the current playlist to <code>name</code>.m3u in the playlist directory.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":512,"url":null},"def":{"name":"save","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"save\", name)\n  execute(\"fetch_nothing\")\nend"}},{"id":"search(filter:String,*,sort:String?=nil,window:MPD::Range?=nil)-instance-method","html_id":"search(filter:String,*,sort:String?=nil,window:MPD::Range?=nil)-instance-method","name":"search","doc":"Search the database for songs matching `filter`.\n\nParameters have the same meaning as for `#find`, except that search is not case sensitive.\n\n```\nmpd.search(\"(any =~ 'crystal')\")\n```","summary":"<p>Search the database for songs matching <code>filter</code>.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":"String | ::Nil"},{"name":"window","doc":null,"default_value":"nil","external_name":"window","restriction":"MPD::Range | ::Nil"}],"args_string":"(filter : String, *, sort : String? = <span class=\"n\">nil</span>, window : MPD::Range? = <span class=\"n\">nil</span>)","args_html":"(filter : String, *, sort : String? = <span class=\"n\">nil</span>, window : <a href=\"../MPD/Range.html\">MPD::Range</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":900,"url":null},"def":{"name":"search","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":"String | ::Nil"},{"name":"window","doc":null,"default_value":"nil","external_name":"window","restriction":"MPD::Range | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  hash = {} of String => String\n  sort.try do\n    hash[\"sort\"] = sort\n  end\n  window.try do\n    hash[\"window\"] = parse_range(window)\n  end\n  write_command(\"search\", filter, hash)\n  execute(\"fetch_songs\")\nend"}},{"id":"search(type:String,query:String)-instance-method","html_id":"search(type:String,query:String)-instance-method","name":"search","doc":"Searches for any song that contains `query`.\n\nParameters have the same meaning as for `#find`, except that search is not case sensitive.\n\n```\nmpd.search(\"title\", \"crystal\")\n```","summary":"<p>Searches for any song that contains <code>query</code>.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String"},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"String"}],"args_string":"(type : String, query : String)","args_html":"(type : String, query : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":886,"url":null},"def":{"name":"search","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String"},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"search\", type, query)\n  execute(\"fetch_songs\")\nend"}},{"id":"searchadd(filter:String,*,sort:String?=nil,window:MPD::Range?=nil)-instance-method","html_id":"searchadd(filter:String,*,sort:String?=nil,window:MPD::Range?=nil)-instance-method","name":"searchadd","doc":"Search the database for songs matching `filter` and add them to the queue.\n\nParameters have the same meaning as for `#search`.","summary":"<p>Search the database for songs matching <code>filter</code> and add them to the queue.</p>","abstract":false,"args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":"String | ::Nil"},{"name":"window","doc":null,"default_value":"nil","external_name":"window","restriction":"MPD::Range | ::Nil"}],"args_string":"(filter : String, *, sort : String? = <span class=\"n\">nil</span>, window : MPD::Range? = <span class=\"n\">nil</span>)","args_html":"(filter : String, *, sort : String? = <span class=\"n\">nil</span>, window : <a href=\"../MPD/Range.html\">MPD::Range</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":934,"url":null},"def":{"name":"searchadd","args":[{"name":"filter","doc":null,"default_value":"","external_name":"filter","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":"String | ::Nil"},{"name":"window","doc":null,"default_value":"nil","external_name":"window","restriction":"MPD::Range | ::Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  hash = {} of String => String\n  sort.try do\n    hash[\"sort\"] = sort\n  end\n  window.try do\n    hash[\"window\"] = parse_range(window)\n  end\n  write_command(\"searchadd\", filter, hash)\n  execute(\"fetch_nothing\")\nend"}},{"id":"searchaddpl(name:String,type:String,query:String)-instance-method","html_id":"searchaddpl(name:String,type:String,query:String)-instance-method","name":"searchaddpl","doc":"Searches for any song that contains `what` in tag `type` and adds them to the playlist named `name`.\n\nIf a playlist by that name doesn't exist it is created.\n\nParameters have the same meaning as for `#find`, except that search is not case sensitive.","summary":"<p>Searches for any song that contains <code>what</code> in tag <code>type</code> and adds them to the playlist named <code>name</code>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String"},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"String"}],"args_string":"(name : String, type : String, query : String)","args_html":"(name : String, type : String, query : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":558,"url":null},"def":{"name":"searchaddpl","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"String"},{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"searchaddpl\", name, type, query)\n  execute(\"fetch_nothing\")\nend"}},{"id":"searchaddpl(name:String,filler:String,*,sort:String?=nil,window:MPD::Range?=nil)-instance-method","html_id":"searchaddpl(name:String,filler:String,*,sort:String?=nil,window:MPD::Range?=nil)-instance-method","name":"searchaddpl","doc":"Search the database for songs matching `filter` and add them to the playlist named `name`.\n\nIf a playlist by that name doesn’t exist it is created.\n\nParameters have the same meaning as for `#search `.","summary":"<p>Search the database for songs matching <code>filter</code> and add them to the playlist named <code>name</code>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"filler","doc":null,"default_value":"","external_name":"filler","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":"String | ::Nil"},{"name":"window","doc":null,"default_value":"nil","external_name":"window","restriction":"MPD::Range | ::Nil"}],"args_string":"(name : String, filler : String, *, sort : String? = <span class=\"n\">nil</span>, window : MPD::Range? = <span class=\"n\">nil</span>)","args_html":"(name : String, filler : String, *, sort : String? = <span class=\"n\">nil</span>, window : <a href=\"../MPD/Range.html\">MPD::Range</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":570,"url":null},"def":{"name":"searchaddpl","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"filler","doc":null,"default_value":"","external_name":"filler","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sort","doc":null,"default_value":"nil","external_name":"sort","restriction":"String | ::Nil"},{"name":"window","doc":null,"default_value":"nil","external_name":"window","restriction":"MPD::Range | ::Nil"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  hash = {} of String => String\n  sort.try do\n    hash[\"sort\"] = sort\n  end\n  window.try do\n    hash[\"window\"] = parse_range(window)\n  end\n  write_command(\"searchaddpl\", name, filter, query, hash)\n  execute(\"fetch_nothing\")\nend"}},{"id":"seek(songid:Int32,time:Int32)-instance-method","html_id":"seek(songid:Int32,time:Int32)-instance-method","name":"seek","doc":"Seeks to the position `time` (in seconds) of entry `songpos` in the playlist.","summary":"<p>Seeks to the position <code>time</code> (in seconds) of entry <code>songpos</code> in the playlist.</p>","abstract":false,"args":[{"name":"songid","doc":null,"default_value":"","external_name":"songid","restriction":"Int32"},{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"Int32"}],"args_string":"(songid : Int32, time : Int32)","args_html":"(songid : Int32, time : Int32)","location":{"filename":"src/crystal_mpd/client.cr","line_number":671,"url":null},"def":{"name":"seek","args":[{"name":"songid","doc":null,"default_value":"","external_name":"songid","restriction":"Int32"},{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"seek\", songid, time)\n  execute(\"fetch_nothing\")\nend"}},{"id":"seekcur(time:String|Int32)-instance-method","html_id":"seekcur(time:String|Int32)-instance-method","name":"seekcur","doc":"Seeks to the position `time` within the current song.\n\nIf prefixed by `+` or `-`, then the time is relative to the current playing position.","summary":"<p>Seeks to the position <code>time</code> within the current song.</p>","abstract":false,"args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"String | Int32"}],"args_string":"(time : String | Int32)","args_html":"(time : String | Int32)","location":{"filename":"src/crystal_mpd/client.cr","line_number":655,"url":null},"def":{"name":"seekcur","args":[{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"String | Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"seekcur\", time)\n  execute(\"fetch_nothing\")\nend"}},{"id":"seekid(songid:Int32,time:String|Int32)-instance-method","html_id":"seekid(songid:Int32,time:String|Int32)-instance-method","name":"seekid","doc":"Seeks to the position `time` (in seconds) of song `songid`.","summary":"<p>Seeks to the position <code>time</code> (in seconds) of song <code>songid</code>.</p>","abstract":false,"args":[{"name":"songid","doc":null,"default_value":"","external_name":"songid","restriction":"Int32"},{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"String | Int32"}],"args_string":"(songid : Int32, time : String | Int32)","args_html":"(songid : Int32, time : String | Int32)","location":{"filename":"src/crystal_mpd/client.cr","line_number":663,"url":null},"def":{"name":"seekid","args":[{"name":"songid","doc":null,"default_value":"","external_name":"songid","restriction":"Int32"},{"name":"time","doc":null,"default_value":"","external_name":"time","restriction":"String | Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"seekid\", songid, time)\n  execute(\"fetch_nothing\")\nend"}},{"id":"sendmessage(channel:String,message:String)-instance-method","html_id":"sendmessage(channel:String,message:String)-instance-method","name":"sendmessage","doc":"Send a `message` to the specified `channel`.","summary":"<p>Send a <code>message</code> to the specified <code>channel</code>.</p>","abstract":false,"args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"String"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(channel : String, message : String)","args_html":"(channel : String, message : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":1011,"url":null},"def":{"name":"sendmessage","args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"String"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"sendmessage\", channel, message)\n  execute(\"fetch_nothing\")\nend"}},{"id":"setvol(vol:Int)-instance-method","html_id":"setvol(vol:Int)-instance-method","name":"setvol","doc":"Sets volume to `vol`, the range of volume is 0-100.","summary":"<p>Sets volume to <code>vol</code>, the range of volume is 0-100.</p>","abstract":false,"args":[{"name":"vol","doc":null,"default_value":"","external_name":"vol","restriction":"Int"}],"args_string":"(vol : Int)","args_html":"(vol : Int)","location":{"filename":"src/crystal_mpd/client.cr","line_number":774,"url":null},"def":{"name":"setvol","args":[{"name":"vol","doc":null,"default_value":"","external_name":"vol","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"setvol\", vol)\n  execute(\"fetch_nothing\")\nend"}},{"id":"shuffle(range:MPD::Range?=nil)-instance-method","html_id":"shuffle(range:MPD::Range?=nil)-instance-method","name":"shuffle","doc":"Shuffles the current playlist. `range` is optional and specifies a range of songs.","summary":"<p>Shuffles the current playlist.</p>","abstract":false,"args":[{"name":"range","doc":null,"default_value":"nil","external_name":"range","restriction":"MPD::Range | Nil"}],"args_string":"(range : MPD::Range? = <span class=\"n\">nil</span>)","args_html":"(range : <a href=\"../MPD/Range.html\">MPD::Range</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":504,"url":null},"def":{"name":"shuffle","args":[{"name":"range","doc":null,"default_value":"nil","external_name":"range","restriction":"MPD::Range | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"shuffle\", range)\n  execute(\"fetch_nothing\")\nend"}},{"id":"single(state:Bool)-instance-method","html_id":"single(state:Bool)-instance-method","name":"single","doc":"Sets single state to `state`, `state` should be `false` or `true`.\n\nWhen single is activated, playback is stopped after current song,\nor song is repeated if the `repeat` mode is enabled.","summary":"<p>Sets single state to <code>state</code>, <code>state</code> should be <code>false</code> or <code>true</code>.</p>","abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Bool"}],"args_string":"(state : Bool)","args_html":"(state : Bool)","location":{"filename":"src/crystal_mpd/client.cr","line_number":785,"url":null},"def":{"name":"single","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"single\", boolean(state))\n  execute(\"fetch_nothing\")\nend"}},{"id":"stats-instance-method","html_id":"stats-instance-method","name":"stats","doc":"Displays statistics.\n\nResponse:\n* `artists`: number of artists\n* `songs`: number of albums\n* `uptime`: daemon uptime in seconds\n* `db_playtime`: sum of all song times in the db\n* `db_update`: last db update in UNIX time\n* `playtime`: time length of music played","summary":"<p>Displays statistics.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":271,"url":null},"def":{"name":"stats","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"stats\")\n  execute(\"fetch_object\")\nend"}},{"id":"status-instance-method","html_id":"status-instance-method","name":"status","doc":"Reports the current status of the player and the volume level.\n\nResponse:\n* `volume`: 0-100\n* `repeat`: 0 or 1\n* `random`: 0 or 1\n* `single`: 0 or 1\n* `consume`: 0 or 1\n* `playlist`: 31-bit unsigned integer, the playlist version number\n* `playlistlength`: integer, the length of the playlist\n* `state`: play, stop, or pause\n* `song`: playlist song number of the current song stopped on or playing\n* `songid`: playlist songid of the current song stopped on or playing\n* `nextsong`: playlist song number of the next song to be played\n* `nextsongid`: playlist songid of the next song to be played\n* `time`: total time elapsed (of current playing/paused song)\n* `elapsed`: Total time elapsed within the current song, but with higher resolution.\n* `bitrate`: instantaneous bitrate in kbps\n* `xfade`: crossfade in seconds\n* `mixrampdb`: mixramp threshold in dB\n* `mixrampdelay`: mixrampdelay in seconds\n* `audio`: sampleRate:bits:channels\n* `updating_db`: job id\n* `error`: if there is an error, returns message here","summary":"<p>Reports the current status of the player and the volume level.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":255,"url":null},"def":{"name":"status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"status\")\n  execute(\"fetch_object\")\nend"}},{"id":"stop-instance-method","html_id":"stop-instance-method","name":"stop","doc":"Stops playing.","summary":"<p>Stops playing.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":645,"url":null},"def":{"name":"stop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"stop\")\n  execute(\"fetch_nothing\")\nend"}},{"id":"subscribe(name:String)-instance-method","html_id":"subscribe(name:String)-instance-method","name":"subscribe","doc":"Subscribe to a channel `name`.\n\nThe channel is created if it does not exist already.\nThe `name` may consist of alphanumeric ASCII characters plus underscore, dash, dot and colon.","summary":"<p>Subscribe to a channel <code>name</code>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":995,"url":null},"def":{"name":"subscribe","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"subscribe\", name)\n  execute(\"fetch_nothing\")\nend"}},{"id":"tagtypes-instance-method","html_id":"tagtypes-instance-method","name":"tagtypes","doc":"Shows a list of available song metadata.","summary":"<p>Shows a list of available song metadata.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":309,"url":null},"def":{"name":"tagtypes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"tagtypes\")\n  execute(\"fetch_list\")\nend"}},{"id":"unsubscribe(name:String)-instance-method","html_id":"unsubscribe(name:String)-instance-method","name":"unsubscribe","doc":"Unsubscribe from a channel `name`.","summary":"<p>Unsubscribe from a channel <code>name</code>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/crystal_mpd/client.cr","line_number":1003,"url":null},"def":{"name":"unsubscribe","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"unsubscribe\", name)\n  execute(\"fetch_nothing\")\nend"}},{"id":"update(uri:String?=nil)-instance-method","html_id":"update(uri:String?=nil)-instance-method","name":"update","doc":"Updates the music database: find new files, remove deleted files, update modified files.\n\n`uri` is a particular directory or song/file to update.\nIf you do not specify it, everything is updated.","summary":"<p>Updates the music database: find new files, remove deleted files, update modified files.</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"nil","external_name":"uri","restriction":"String | ::Nil"}],"args_string":"(uri : String? = <span class=\"n\">nil</span>)","args_html":"(uri : String? = <span class=\"n\">nil</span>)","location":{"filename":"src/crystal_mpd/client.cr","line_number":352,"url":null},"def":{"name":"update","args":[{"name":"uri","doc":null,"default_value":"nil","external_name":"uri","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"update\", uri)\n  execute(\"fetch_list\")\nend"}},{"id":"urlhandlers-instance-method","html_id":"urlhandlers-instance-method","name":"urlhandlers","doc":"Gets a list of available URL handlers.","summary":"<p>Gets a list of available URL handlers.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/client.cr","line_number":325,"url":null},"def":{"name":"urlhandlers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"synchronize do\n  write_command(\"urlhandlers\")\n  execute(\"fetch_list\")\nend"}},{"id":"version:String?-instance-method","html_id":"version:String?-instance-method","name":"version","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/crystal_mpd/client.cr","line_number":34,"url":null},"def":{"name":"version","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@version"}},{"id":"with_command_list(&)-instance-method","html_id":"with_command_list(&)-instance-method","name":"with_command_list","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/crystal_mpd/client.cr","line_number":193,"url":null},"def":{"name":"with_command_list","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  command_list_ok_begin\n  yield\nensure\n  command_list_end\nend"}}],"macros":[],"types":[]},{"html_id":"crystal_mpd/MPD/CommandList","path":"MPD/CommandList.html","kind":"struct","full_name":"MPD::CommandList","name":"CommandList","abstract":false,"superclass":{"html_id":"crystal_mpd/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"crystal_mpd/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"crystal_mpd/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"crystal_mpd/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/crystal_mpd/command_list.cr","line_number":2,"url":null}],"repository_name":"crystal_mpd","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal_mpd/MPD","kind":"module","full_name":"MPD","name":"MPD"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/command_list.cr","line_number":2,"url":null},"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"id":"active:Bool-instance-method","html_id":"active:Bool-instance-method","name":"active","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/crystal_mpd/command_list.cr","line_number":4,"url":null},"def":{"name":"active","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@active"}},{"id":"active=(active:Bool)-instance-method","html_id":"active=(active:Bool)-instance-method","name":"active=","doc":null,"summary":null,"abstract":false,"args":[{"name":"active","doc":null,"default_value":"","external_name":"active","restriction":"Bool"}],"args_string":"(active : Bool)","args_html":"(active : Bool)","location":{"filename":"src/crystal_mpd/command_list.cr","line_number":4,"url":null},"def":{"name":"active=","args":[{"name":"active","doc":null,"default_value":"","external_name":"active","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@active = active"}},{"id":"active?:Bool-instance-method","html_id":"active?:Bool-instance-method","name":"active?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/crystal_mpd/command_list.cr","line_number":19,"url":null},"def":{"name":"active?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@active"}},{"id":"add(command:String)-instance-method","html_id":"add(command:String)-instance-method","name":"add","doc":null,"summary":null,"abstract":false,"args":[{"name":"command","doc":null,"default_value":"","external_name":"command","restriction":"String"}],"args_string":"(command : String)","args_html":"(command : String)","location":{"filename":"src/crystal_mpd/command_list.cr","line_number":6,"url":null},"def":{"name":"add","args":[{"name":"command","doc":null,"default_value":"","external_name":"command","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@commands << command"}},{"id":"begin-instance-method","html_id":"begin-instance-method","name":"begin","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/command_list.cr","line_number":10,"url":null},"def":{"name":"begin","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@active = true"}},{"id":"commands:Array(String)-instance-method","html_id":"commands:Array(String)-instance-method","name":"commands","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(String)","args_html":" : Array(String)","location":{"filename":"src/crystal_mpd/command_list.cr","line_number":3,"url":null},"def":{"name":"commands","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@commands"}},{"id":"commands=(commands)-instance-method","html_id":"commands=(commands)-instance-method","name":"commands=","doc":null,"summary":null,"abstract":false,"args":[{"name":"commands","doc":null,"default_value":"","external_name":"commands","restriction":""}],"args_string":"(commands)","args_html":"(commands)","location":{"filename":"src/crystal_mpd/command_list.cr","line_number":3,"url":null},"def":{"name":"commands=","args":[{"name":"commands","doc":null,"default_value":"","external_name":"commands","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@commands = commands"}},{"id":"reset-instance-method","html_id":"reset-instance-method","name":"reset","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_mpd/command_list.cr","line_number":14,"url":null},"def":{"name":"reset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@commands.clear\n@active = false\n"}}],"macros":[],"types":[]},{"html_id":"crystal_mpd/MPD/Error","path":"MPD/Error.html","kind":"class","full_name":"MPD::Error","name":"Error","abstract":false,"superclass":{"html_id":"crystal_mpd/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"crystal_mpd/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"crystal_mpd/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crystal_mpd/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/crystal_mpd/error.cr","line_number":2,"url":null}],"repository_name":"crystal_mpd","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal_mpd/MPD","kind":"module","full_name":"MPD","name":"MPD"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"crystal_mpd/MPD/Object","path":"MPD/Object.html","kind":"alias","full_name":"MPD::Object","name":"Object","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/crystal_mpd/client.cr","line_number":2,"url":null}],"repository_name":"crystal_mpd","program":false,"enum":false,"alias":true,"aliased":"Hash(String, String)","aliased_html":"Hash(String, String)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal_mpd/MPD","kind":"module","full_name":"MPD","name":"MPD"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"crystal_mpd/MPD/Objects","path":"MPD/Objects.html","kind":"alias","full_name":"MPD::Objects","name":"Objects","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/crystal_mpd/client.cr","line_number":3,"url":null}],"repository_name":"crystal_mpd","program":false,"enum":false,"alias":true,"aliased":"Array(Hash(String, String))","aliased_html":"Array(Hash(String, String))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal_mpd/MPD","kind":"module","full_name":"MPD","name":"MPD"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"crystal_mpd/MPD/Pair","path":"MPD/Pair.html","kind":"alias","full_name":"MPD::Pair","name":"Pair","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/crystal_mpd/client.cr","line_number":4,"url":null}],"repository_name":"crystal_mpd","program":false,"enum":false,"alias":true,"aliased":"Array(String)","aliased_html":"Array(String)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal_mpd/MPD","kind":"module","full_name":"MPD","name":"MPD"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"crystal_mpd/MPD/Pairs","path":"MPD/Pairs.html","kind":"alias","full_name":"MPD::Pairs","name":"Pairs","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/crystal_mpd/client.cr","line_number":5,"url":null}],"repository_name":"crystal_mpd","program":false,"enum":false,"alias":true,"aliased":"Array(Array(String))","aliased_html":"Array(Array(String))","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal_mpd/MPD","kind":"module","full_name":"MPD","name":"MPD"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"crystal_mpd/MPD/Range","path":"MPD/Range.html","kind":"alias","full_name":"MPD::Range","name":"Range","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/crystal_mpd/client.cr","line_number":6,"url":null}],"repository_name":"crystal_mpd","program":false,"enum":false,"alias":true,"aliased":"(Range(Int32, Int32) | Range(Int32, Nil) | Range(Nil, Int32))","aliased_html":"Range(Int32, Int32) | Range(Int32, Nil) | Range(Nil, Int32)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal_mpd/MPD","kind":"module","full_name":"MPD","name":"MPD"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}}